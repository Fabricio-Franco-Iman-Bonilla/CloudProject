#!/bin/bash

# Variables configurables
ORIGINAL_REPO_URL="https://github.com/geraldinRC/Capibaras-V2.git"
ORIGINAL_REMOTE_NAME="original"
ORIGINAL_BRANCH="main"

echo "======================================"
echo "üõ†Ô∏è  ACTUALIZANDO DESDE REPO ORIGINAL"
echo "======================================"

# Verificar si el remote ya est√° agregado
if ! git remote | grep -q "$ORIGINAL_REMOTE_NAME"; then
    echo "üîó Agregando el remote '$ORIGINAL_REMOTE_NAME'..."
    git remote add $ORIGINAL_REMOTE_NAME $ORIGINAL_REPO_URL
else
    echo "‚úÖ Remote '$ORIGINAL_REMOTE_NAME' ya existe."
fi

# Guardar cambios locales
echo "üì¶ Guardando cambios locales (stash)..."
git stash push -m "Backup antes de merge autom√°tico"

# Obtener cambios del repositorio original
echo "‚¨áÔ∏è  Obteniendo cambios del repositorio original..."
git fetch $ORIGINAL_REMOTE_NAME

# Realizar el merge con permiso para historias no relacionadas
echo "üîÑ Haciendo merge con --allow-unrelated-histories..."
git merge $ORIGINAL_REMOTE_NAME/$ORIGINAL_BRANCH --allow-unrelated-histories

# Verificar si hubo conflictos
if [ $? -ne 0 ]; then
    echo "‚ö†Ô∏è  Conflictos detectados durante el merge."
    echo "üìù Por favor resu√©lvelos manualmente y luego ejecuta:"
    echo "    git add ."
    echo "    git commit -m 'Conflictos resueltos'"
    echo "    git stash pop (si quieres recuperar tus cambios locales)"
else
    # Restaurar tu stash si todo fue bien
    if git stash list | grep -q "Backup antes de merge autom√°tico"; then
        echo "üì§ Restaurando cambios locales guardados..."
        git stash pop
    else
        echo "üìÅ No hay cambios locales previos que restaurar."
    fi
    echo "‚úÖ Merge completado sin conflictos."
fi